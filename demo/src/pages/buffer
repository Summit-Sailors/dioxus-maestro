use dioxus::prelude::*;
use dioxus_monaco::{MonacoEditor, MonacoEditorProps};
use wasm_bindgen::prelude::*;
use std::time::Duration;
use async_std::task::sleep;
use dioxus_free_icons::{icons::fa_solid_icons::{FaCompress, FaCopy, FaExpand}, Icon};
use tailwind_fuse::tw_join;

#[wasm_bindgen]
extern "C" {
    #[wasm_bindgen(js_namespace = window)]
    fn eval_js(code: &str);
}

#[derive(Props, PartialEq, Clone)]
pub struct CodeEditorProps {
    #[props(into)]
    code: String,
    #[props(default = "rust".to_string())]
    language: String,
    #[props(into, default = String::from("Example Code"))]
    title: String,
}

#[component]
pub fn CodeEditor(props: CodeEditorProps) -> Element {
    let code = use_signal(|| props.code.clone());
    let is_expanded = use_signal(|| false);
    let clipboard = use_clipboard();
    let copy_status = use_signal(|| String::new());
    let is_copying = use_signal(|| false);
    let compile_error = use_signal(|| None::<String>);
    
    let handle_copy = move |_| {
        let content = code();
        let mut clipboard = clipboard.clone();
        is_copying.set(true);
        spawn(async move {
            match clipboard.set(content).await {
                Ok(_) => copy_status.set(Some("Copied!".to_string())),
                Err(_) => copy_status.set(Some("Failed to copy".to_string())),
            }
            is_copying.set(false);
            spawn(async move {
                sleep(Duration::from_secs(2)).await;
                copy_status.set(None);
            });
        });
    };

    let handle_code_change = move |new_code: String| {
        code.set(new_code.clone());
        
        spawn(async move {
            // Simulate compilation delay
            sleep(Duration::from_millis(500)).await;
            
            // Try executing the new code
            match compile_and_run(&new_code) {
                Ok(_) => compile_error.set(None),
                Err(err) => compile_error.set(Some(err)),
            }
        });
    };

    let toggle_expanded = move |_| {
        is_expanded.set(!is_expanded());
    };

    rsx! {
        div {
            class: "p-2 bg-gray-800 rounded-lg mt-4 sm:mt-8 mb-8 w-full",
            
            // header section
            div {
                class: "flex items-center justify-between text-white",
                h2 { class: "text-xl font-semibold", "{props.title}" }
                div {
                    class: "flex space-x-2",
                    button {
                        class: "p-2 rounded-full hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 relative",
                        disabled: "{is_copying()}",
                        onclick: handle_copy,
                        title: "Copy Code",
                        Icon { icon: FaCopy, width: 20, height: 20 }
                        div {
                            class: tw_join!("absolute -top-8 left-1/2 transform -translate-x-1/2 bg-gray-900 text-white text-xs py-1 px-2 rounded transition-opacity duration-300 {}", 
                                if copy_status().is_none() { "opacity-0" } else { "opacity-100" }
                            ),
                            "{copy_status.unwrap_or_default()}"
                        }
                    }
                    button {
                        class: "p-2 rounded-full hover:bg-gray-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500",
                        onclick: toggle_expanded,
                        title: if is_expanded() { "Collapse Code" } else { "Expand Code" },
                        {
                            if is_expanded() {
                                rsx! { Icon { icon: FaCompress, width: 20, height: 20 } }
                            } else {
                                rsx! { Icon { icon: FaExpand, width: 20, height: 20 } }
                            }
                        }
                    }
                }
            }    

            div {
                class: tw_join!(
                    "grid gap-4 transition-all duration-500 ease-in-out", 
                    if is_expanded() { "lg:grid-cols-2 grid-cols-1" } else { "grid-cols-1" }
                ),
                
                // Render the compiled output or error message
                div {
                    class: "bg-gray-300 max-h-screen p-6 rounded-lg shadow-md border border-gray-200 mt-4",
                    if let Some(error) = compile_error() {
                        rsx! { p { class: "text-red-500", "Compilation Error: {error}" } }
                    } else {
                        rsx! { div { id: "demo-output" } }
                    }
                }

                // Code editor section
                if is_expanded() {
                    h2 { class: "text-xl font-semibold text-center mt-4", "Source Code" }
                    div {
                        class: "bg-gray-900 rounded-lg shadow-md border border-gray-700 overflow-hidden p-4",
                        MonacoEditor {
                            language: props.language.clone(),
                            value: code().clone(),
                            on_change: handle_code_change
                        }
                    }
                }
            }
        }
    }
}

// Simulate Compilation & Execution
fn compile_and_run(code: &str) -> Result<(), String> {
    if code.contains("error") {
        return Err("Syntax error detected".to_string());
    }
    eval_js(code);
    Ok(())
}
